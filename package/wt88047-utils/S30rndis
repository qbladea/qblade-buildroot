#!/bin/sh

export PATH="/usr/bin:/usr/sbin:/bin:/sbin"
IP="192.168.21.1"

setup_configfs() {
    mkdir -pv /sys/config
    if [ -e /sys/config ]
    then
	mount -t configfs -o nodev,noexec,nosuid configfs /sys/config || exit 1
    fi
}

setup_usb_network_android() {
    modprobe usb_f_rndis
    # Only run, when we have the android usb driver
    SYS=/sys/class/android_usb/android0
    if ! [ -e "$SYS" ]; then
	echo "  /sys/class/android_usb does not exist, skipping android_usb"
	return
    fi

    echo "  Setting up an USB gadget through android_usb"

    usb_idVendor="$(echo "${deviceinfo_usb_idVendor:-0x18D1}" | sed "s/0x//g")"	# default: Google Inc.
    usb_idProduct="$(echo "${deviceinfo_usb_idProduct:-0xD001}" | sed "s/0x//g")"	# default: Nexus 4 (fastboot)

    # Do the setup
    echo "0" >"$SYS/enable"
    echo "$usb_idVendor" >"$SYS/idVendor"
    echo "$usb_idProduct" >"$SYS/idProduct"
    echo "rndis" >"$SYS/functions"
    echo "1" >"$SYS/enable"
}

setup_usb_network_configfs() {

    
    # See: https://www.kernel.org/doc/Documentation/usb/gadget_configfs.txt
    CONFIGFS=/sys/config/usb_gadget

    if ! [ -e "$CONFIGFS" ]; then
	echo "  /config/usb_gadget does not exist, skipping configfs usb gadget"
	return
    fi

    # Default values for USB-related deviceinfo variables
    usb_idVendor="${deviceinfo_usb_idVendor:-0x18D1}"   # default: Google Inc.
    usb_idProduct="${deviceinfo_usb_idProduct:-0xD001}" # default: Nexus 4 (fastboot)
    usb_serialnumber="${deviceinfo_usb_serialnumber:-postmarketOS}"
    usb_rndis_function="${deviceinfo_usb_rndis_function:-rndis.usb0}"

    echo "  Setting up an USB gadget through configfs"
    # Create an usb gadet configuration
    mkdir $CONFIGFS/g1 || echo "  Couldn't create $CONFIGFS/g1"
    echo "$usb_idVendor"  > "$CONFIGFS/g1/idVendor"
    echo "$usb_idProduct" > "$CONFIGFS/g1/idProduct"

    # Create english (0x409) strings
    mkdir $CONFIGFS/g1/strings/0x409 || echo "  Couldn't create $CONFIGFS/g1/strings/0x409"

    # shellcheck disable=SC2154
    echo "$deviceinfo_manufacturer" > "$CONFIGFS/g1/strings/0x409/manufacturer"
    echo "$usb_serialnumber"        > "$CONFIGFS/g1/strings/0x409/serialnumber"
    # shellcheck disable=SC2154
    echo "$deviceinfo_name"         > "$CONFIGFS/g1/strings/0x409/product"

    # Create rndis function. The function can be named differently in downstream kernels.
    mkdir $CONFIGFS/g1/functions/"$usb_rndis_function" \
	|| echo "  Couldn't create $CONFIGFS/g1/functions/$usb_rndis_function"

    # Create configuration instance for the gadget
    mkdir $CONFIGFS/g1/configs/c.1 \
	|| echo "  Couldn't create $CONFIGFS/g1/configs/c.1"
    mkdir $CONFIGFS/g1/configs/c.1/strings/0x409 \
	|| echo "  Couldn't create $CONFIGFS/g1/configs/c.1/strings/0x409"
    echo "rndis" > $CONFIGFS/g1/configs/c.1/strings/0x409/configuration \
	|| echo "  Couldn't write configration name"

    # Link the rndis instance to the configuration
    ln -s $CONFIGFS/g1/functions/"$usb_rndis_function" $CONFIGFS/g1/configs/c.1 \
	|| echo "  Couldn't symlink $usb_rndis_function"

    # Check if there's an USB Device Controller
    if [ -z "$(ls /sys/class/udc)" ]; then
	echo "  No USB Device Controller available"
	return
    fi

    # Link the gadget instance to an USB Device Controller. This activates the gadget.
    # See also: https://github.com/postmarketOS/pmbootstrap/issues/338
    # shellcheck disable=SC2005
    echo "$(ls /sys/class/udc)" > $CONFIGFS/g1/UDC || echo "  Couldn't write UDC"
}

setup_usb_network() {
    # Only run once
    _marker="/tmp/_setup_usb_network"
    [ -e "$_marker" ] && return
    touch "$_marker"
    echo "Setup usb network"
    # Run all usb network setup functions (add more below!)
    setup_configfs
    setup_usb_network_android
    setup_usb_network_configfs
}

setup_interface() {
	# Get usb interface
	INTERFACE=""
	ifconfig rndis0 "$IP" 2>/dev/null && INTERFACE=rndis0
	if [ -z $INTERFACE ]; then
		ifconfig usb0 "$IP" 2>/dev/null && INTERFACE=usb0
	fi
	if [ -z $INTERFACE ]; then
		ifconfig eth0 "$IP" 2>/dev/null && INTERFACE=eth0
	fi

	if [ -z $INTERFACE ]; then
		echo "  Interfaces:"
		ip link
		return
	fi

	echo "  Using interface $INTERFACE"
}

start()
{
    setup_usb_network
    setup_interface
}

case "$1" in
    start)
	start
	;;
  *)
	echo "Usage: $0 {start}"
	exit 1
esac

exit $?
